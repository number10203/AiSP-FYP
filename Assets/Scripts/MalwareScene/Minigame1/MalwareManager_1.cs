using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// This class is used only for the first mini-game
public class MalwareManager_1 : MonoBehaviour
{
    // Components
    internal ObjectPool_Malware objectPool;
    internal PlayerController_Malware playerController;
    internal Spyware_Malware spyware;
    internal UIManager_Malware UIManager;
    internal DialogueManager dialogueManager1, dialogueManager2;
    internal AudioManager audioManager;
    internal CutsceneManager cutsceneManager;
    internal InstructionsManager instructionsManager;
    internal CutsceneSubtitleManager subtitleManager;

    // Manager internals
    internal int score = 0;
    internal bool gameStarted = false;
    internal bool isWin = false, isLose = false;

    internal bool dialoguePlayed = false;
    internal bool endDialoguePlaying = false;

    private int languageNumber;

    // BGM
    [Header("BGM")]
    [SerializeField] private AudioClip BGM;

    // SFX
    [Header("SFX")]
    [SerializeField] private AudioClip winClip;

    void Awake()
    {
        UIManager = GetComponent<UIManager_Malware>();
        audioManager = GetComponent<AudioManager>();
        cutsceneManager = GetComponent<CutsceneManager>();
        instructionsManager = GetComponent<InstructionsManager>();
        objectPool = GameObject.Find("ObjectPooling").GetComponent<ObjectPool_Malware>();
        playerController = GameObject.FindGameObjectWithTag("Player").GetComponent<PlayerController_Malware>();
        spyware = GameObject.Find("Spyware").GetComponent<Spyware_Malware>();
        dialogueManager1 = GameObject.Find("DialogueBox").GetComponent<DialogueManager>();
        dialogueManager2 = GameObject.Find("DialogueBox2").GetComponent<DialogueManager>();
        subtitleManager = gameObject.GetComponent<CutsceneSubtitleManager>();

        // Sets singleton-used score of current play session to 0
        GameManager.INSTANCE.currentMalwareScore = 0;

        if (GameManager.INSTANCE.chosenLanguage == GameManager.LANGUAGE.CHINESE)
        {
            languageNumber = 1;
        }
        else if (GameManager.INSTANCE.chosenLanguage == GameManager.LANGUAGE.MALAY)
        {
            languageNumber = 2;
        }
        else if (GameManager.INSTANCE.chosenLanguage == GameManager.LANGUAGE.TAMIL)
        {
            languageNumber = 3;
        }
        else
        {
            languageNumber = 0;
        }
    }

    private void Update()
    {
        // After dialogue has finished
        if (instructionsManager.instructionsFinished && dialogueManager1.isReady && !dialoguePlayed)
        {
            dialogueManager1.gameObject.SetActive(true);
            dialogueManager1.StartDialogue();
            dialoguePlayed = true;
        }

        // Sets the game to start once everything has finished
        if (!dialogueManager1.isActive && instructionsManager.instructionsFinished)
        {
            UIManager.ActivateAllUI();
            gameStarted = true;
        }
    }

    public void InitialSetUp()
    {
        // Once initial cutscene has finished playing
        StartCoroutine(UIManager.FadeOut());
        dialogueManager2.gameObject.SetActive(false);
        instructionsManager.StartInstructions();
        audioManager.PlayMusic(BGM);
        UIManager.DeactivateAllUI();
    }

    // Win conditions
    public void SetWin()
    {
        if (!isWin)
        {
            isWin = true;
            StartCoroutine(FadeWin());

            // Converts score
            if (playerController.lives > 0)
            {
                score = playerController.lives * 150;
            }

            // Sets current singleton score to the score when finished
            GameManager.INSTANCE.currentMalwareScore = score;

            audioManager.StopMusic();

            audioManager.Play(winClip);
        }
    }

    // Transition
    private IEnumerator FadeWin()
    {
        StartCoroutine(UIManager.FadeOut());

        yield return new WaitForSeconds(1f);

        Time.timeScale = 0;
    }

    // Lose condition
    public void SetLose()
    {
        Time.timeScale = 0;
        isLose = true;

        audioManager.StopMusic();
    }

    // Scene change
    public void GoToNextMinigame()
    {
        StartCoroutine(UIManager.WinFade());
        StartCoroutine(NextMiniGame());
    }

    private IEnumerator NextMiniGame()
    {
        yield return new WaitForSeconds(1f);

        SceneController.INSTANCE.LoadScene(5);
    }

    // Scene change
    public void BackToMainMenu()
    {
        SceneController.INSTANCE.LoadScene(1);
    }

    // Restart mini-game
    public void RestartMinigame()
    {
        Time.timeScale = 1;
        SceneController.INSTANCE.Retry();
    }
}
