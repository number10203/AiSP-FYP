using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class UIManager_Malware : MonoBehaviour
{
    [Header("Transitions")]
    [SerializeField] private GameObject fadeIn;
    [SerializeField] private GameObject fadeOut;

    [Header("UI")]
    [SerializeField] private GameObject ui;
    [SerializeField] private GameObject dialogueBox1;
    [SerializeField] private GameObject entireCanvas;

    [Header("Hearts")]
    [SerializeField] private int numOfHearts;
    [SerializeField] private Image[] hearts;

    [Header("Score")]
    public TextMeshProUGUI scoreText;
    public TextMeshProUGUI LivesText;
    public TextMeshProUGUI scoreCounterText;

    [Header("Win Lose")]
    public GameObject winUI;
    public GameObject loseUI;

    [Header("Boss")]
    public Slider spywareHealthSlider;
    public Vector3 offset; // Can be used anywhere tbh

    [Header("Learning Outcomes")]
    public GameObject learningOutcomes;


    // SceneManager
    private MalwareManager_1 sceneManager;
    private bool lost = false;

    private void Start()
    {
        sceneManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<MalwareManager_1>();
    }

    // Update UI every frame
    void Update()
    {
        LivesText.text = "Lives: " + sceneManager.playerController.lives;
        scoreCounterText.text = "Score: " + sceneManager.playerController.lives * 150;

        PlayerHealthUpdate();
        SpywareBossHealthPosition();

        // Activate win or lose UI accordingly
        if (sceneManager.isWin == true)
        {
            ActivateWinUI();
        }
        else if (sceneManager.isLose == true)
        {
            ActivateLoseUI();
        }
    }

    public IEnumerator WinFade()
    {
        Time.timeScale = 1;

        fadeIn.SetActive(true);

        yield return new WaitForSeconds(1f);

        SceneController.INSTANCE.LoadScene(5);
    }

    // Fade in transition
    public IEnumerator FadeIn()
    {
        fadeIn.SetActive(true);

        yield return new WaitForSeconds(1f);

        fadeIn.SetActive(false);
    }

    // Fade out transition
    public IEnumerator FadeOut()
    {
        fadeOut.SetActive(true);

        yield return new WaitForSeconds(1f);

        fadeOut.SetActive(false);
    }

    // Currently only usable by spyware boss, used to change value of boss slider
    public void SetSpywareBossHealth(float health, float maxHealth)
    {
        // Set Slider to active when health is below certain amount
        spywareHealthSlider.gameObject.SetActive(true);
        spywareHealthSlider.value = health;
        spywareHealthSlider.maxValue = maxHealth;

        spywareHealthSlider.fillRect.GetComponentInChildren<Image>().color = Color.Lerp(Color.red, Color.green, spywareHealthSlider.normalizedValue);
    }

    // Updates slider pposition of spyware boss
    private void SpywareBossHealthPosition()
    {
        offset = new Vector3(0.1f, 2, 0);
        spywareHealthSlider.transform.position = Camera.main.WorldToScreenPoint(sceneManager.spyware.transform.position + offset);
    }

    // Updates player hearts UI
    private void PlayerHealthUpdate()
    {
        for (int i = 0; i < hearts.Length; i++)
        {
            if (i < sceneManager.playerController.health)
            {
                hearts[i].color = Color.white;
            }
            else
            {
                hearts[i].color = new Color(0.3f, 0.3f, 0.3f, 1f);
            }

            if (i < numOfHearts)
            {
                hearts[i].enabled = true;
            }
            else
            {
                hearts[i].enabled = false;
            }
        }

        if (sceneManager.playerController.health > numOfHearts)
        {
            sceneManager.playerController.health = numOfHearts;
        }
    }

    public void ActivateWinUI()
    {
        winUI.SetActive(true);
        scoreText.text = "Score: " + sceneManager.score;
    }

    public void ActivateLoseUI()
    {
        if (loseUI != null)
            loseUI.SetActive(true);

        if (!lost)
        {
            lost = true;

            sceneManager.cutsceneManager.cutsceneObj.SetActive(true);
            sceneManager.cutsceneManager.ResetCutscene();
            if (!sceneManager.cutsceneManager.isPlaying && !sceneManager.cutsceneManager.hasPlayed)
            {
                sceneManager.cutsceneManager.StartCutscene(System.IO.Path.Combine(Application.streamingAssetsPath, "Cutscenes/Ethan_Lose.mp4"));
            }
        }
        else if (lost && sceneManager.cutsceneManager.hasPlayed)
        {
            sceneManager.cutsceneManager.cutsceneObj.SetActive(false);

        }
    }

    // Enables infographic
    public void ActivateLearningOutcomes()
    {
        learningOutcomes.SetActive(true);
    }

    public void DeactivateAllUI()
    {
        ui.SetActive(false);
        dialogueBox1.SetActive(false);
    }

    public void ActivateAllUI()
    {
        ui.SetActive(true);
        //dialogueBox1.SetActive(true);
    }
}
