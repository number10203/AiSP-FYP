using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// Player script
public class PlayerController_Malware : MonoBehaviour
{
    internal int weaponID = 0;
    internal int health = 3;
    internal int lives = 3;

    [Header("Attributes")]
    [SerializeField] private float speed;

    [Header("Constraints")]
    [SerializeField] private float xMin;
    [SerializeField] private float xMax;
    [SerializeField] private float yMin;
    [SerializeField] private float yMax;

    [Header("Joystick")]
    [SerializeField] private Joystick joystick;

    [Header("Bullet")]
    [SerializeField] private GameObject bullet;
    [SerializeField] private float bulletSize;
    [SerializeField] private Sprite bulletSprite;

    [Header("Trail")]
    [SerializeField] private float startTimeBetweenSpawn;
    [SerializeField] private GameObject trail;
    [SerializeField] private Vector3 offset;

    [Header("Player SFX")]
    [SerializeField] private AudioClip shootClip;
    [SerializeField] private AudioClip damagedClip;
    [SerializeField] private AudioClip deathClip;

    // Private variables
    private float nextFire;
    private float fireRate = 0.4f;
    private float powerTimer = 0f;
    private bool isRespawning = false;
    private float timeBetweenSpawn;
    private float timeForDestroy = 0.55f;

    // Components
    private MalwareManager_1 sceneManager;
    private Animator animator;

    private void Start()
    {
        sceneManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<MalwareManager_1>();
        animator = GetComponent<Animator>();
    }

    private void Update()
    {
        // Check if game started
        if (!sceneManager.gameStarted)
        {
            return;
        }

        // Stops update when player wins/loses
        if (sceneManager.isWin || sceneManager.isLose)
        {
            return;
        }

        // Check if end dialogue is playing
        if (sceneManager.endDialoguePlaying)
        {
            return;
        }

        // Player movement and player constraint function
        PlayerMovement();
        PlayerConstraint();

        // Power up timer for increase shooting
        if (powerTimer <= 0f)
        {
            fireRate = 0.4f;
        }
        else
        {
            powerTimer -= Time.deltaTime;
        }

        // Trail
        if (timeBetweenSpawn <= 0)
        {
            GameObject instance = Instantiate(trail, transform.position + offset, Quaternion.identity);
            instance.transform.rotation = Random.rotation;
            Destroy(instance, timeForDestroy);
            timeBetweenSpawn = startTimeBetweenSpawn;
        }
        else
        {
            timeBetweenSpawn -= Time.deltaTime;
        }
    }

    private void PlayerMovement()
    {
        if (!isRespawning)
        {
            if (joystick.Horizontal != 0f && joystick.Vertical != 0f)
            {
                if (Time.time > nextFire)
                {
                    Shooting();
                }
            }

            Vector3 pos = transform.position + new Vector3(joystick.Direction.x, joystick.Direction.y);
            transform.position = Vector3.Lerp(transform.position, pos, speed * Time.deltaTime);
        }
        else if (isRespawning) // Don't move when respawning
        {
            if (transform.position.x < -5)
            {
                transform.position += speed * Time.deltaTime * Vector3.right;
            }
        }
    }

    // Player constraint to X and Y axis
    private void PlayerConstraint()
    {
        if (transform.position.y > yMax)
        {
            transform.position = new Vector3(transform.position.x, yMax);
        }
        else if (transform.position.y < yMin)
        {
            transform.position = new Vector3(transform.position.x, yMin);
        }

        if (transform.position.x > xMax)
        {
            transform.position = new Vector3(xMax, transform.position.y);
        }
        else if (transform.position.x < xMin)
        {
            transform.position = new Vector3(xMin, transform.position.y);
        }
    }

    // Shooting function
    private void Shooting()
    {
        // Get available next fire
        nextFire = Time.time + fireRate;

        if (weaponID % 2 == 0)  // Odd
        {
            GameObject newBullet = sceneManager.objectPool.GetPooledObject();
            newBullet.transform.position = new Vector3(transform.position.x + 1.5f, transform.position.y - 0.5f);
            newBullet.transform.right = Vector2.right;
            newBullet.tag = "MalwarePlayerBullet";
            newBullet.GetComponent<SpriteRenderer>().sprite = bulletSprite;
            newBullet.transform.localScale = new Vector3(bulletSize, bulletSize, bulletSize);
            newBullet.SetActive(true);

            if (weaponID != 0)
            {
                for (int i = 1; i < weaponID + 1; ++i)
                {
                    GameObject sideBullet = sceneManager.objectPool.GetPooledObject();
                    sideBullet.transform.position = new Vector3(transform.position.x + 1.5f, transform.position.y - 0.5f);
                    sideBullet.tag = "MalwarePlayerBullet";
                    sideBullet.GetComponent<SpriteRenderer>().sprite = bulletSprite;
                    sideBullet.transform.localScale = new Vector3(bulletSize, bulletSize, bulletSize);
                    sideBullet.SetActive(true);
                    if (i % 2 == 0) // Odd
                    {
                        sideBullet.transform.right = new Vector3(2, i - 1).normalized;
                    }
                    else   // Even
                    {
                        sideBullet.transform.right = new Vector3(2, -i).normalized;
                    }
                }
            }
        }
        else   // Even
        {
            for (int i = 1; i < weaponID + 2; ++i)
            {
                GameObject sideBullet = sceneManager.objectPool.GetPooledObject();
                sideBullet.transform.right = Vector2.right;
                sideBullet.tag = "MalwarePlayerBullet";
                sideBullet.GetComponent<SpriteRenderer>().sprite = bulletSprite;
                sideBullet.transform.localScale = new Vector3(bulletSize, bulletSize, bulletSize);
                sideBullet.SetActive(true);
                if (i % 2 == 0) // Odd
                {
                    sideBullet.transform.position = new Vector3(transform.position.x + 1.5f, transform.position.y - 0.5f + (i - 1.75f));
                }
                else   // Even
                {
                    sideBullet.transform.position = new Vector3(transform.position.x + 1.5f, transform.position.y - 0.5f + (-i + 0.25f));
                }
            }
        }

        sceneManager.audioManager.Play(shootClip);
    }

    // Take damage function used when hit
    public void TakeDamage()
    {
        // Check if end dialogue is playing
        if (sceneManager.endDialoguePlaying)
        {
            return;
        }

        health -= 1;

        sceneManager.audioManager.Play(damagedClip);

        // Respawn when there are still lives
        if (health <= 0 && lives > 1)
        {
            isRespawning = true;
            animator.SetBool("isRespawning", isRespawning);
            health = 3;
            lives -= 1;
            transform.position = new Vector3(-12, 0, 0);
            if (weaponID > 1)
            {
                --weaponID;
            }
        }
        else if (health <= 0 && lives <= 1)
        {
            sceneManager.SetLose();

            sceneManager.audioManager.Play(deathClip);
        }

    }

    // Reset respawn bool to enable shooting
    public void RespawnAnimationBoolean()
    {
        isRespawning = false;
        animator.SetBool("isRespawning", isRespawning);
    }
}
