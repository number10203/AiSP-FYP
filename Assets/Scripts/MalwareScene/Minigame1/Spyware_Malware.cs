using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Spyware_Malware : MonoBehaviour
{
    // States
    internal enum State
    {
        NONE,
        IDLE,
        MOVE,
        ATTACK,
        SP_ATTACK,
        POPUP_ATTACK,
        DEAD
    };

    [Header("Prefabs")]
    [SerializeField] private GameObject bulletPrefab;
    [SerializeField] private GameObject misslePrefab;
    [SerializeField] private GameObject popupPrefab;

    [Header("Bullet")]
    [SerializeField] private float timer = 3f;
    [SerializeField] private float bulletSize;
    [SerializeField] private Sprite bulletSprite;

    [Header("Effects")]
    [SerializeField] private float timeBetweenExplosions;
    [SerializeField] private GameObject explosion;

    [Header("SFX")]
    [SerializeField] private AudioClip deathClip;
    [SerializeField] private AudioClip damagedClip;
    [SerializeField] private AudioClip chargeClip;
    [SerializeField] private AudioClip specialClip;
    [SerializeField] private AudioClip shootClip;
    [SerializeField] private AudioClip popClip;

    // Private variables
    private int missleFired = 0;
    private int spywareCurrentHealth;
    private readonly int spywareMaxHealth = 100;
    private bool isUp = true, firingMissle = false;
    private float nextFire;
    private readonly float fireRate = 1.5f;
    private Vector3 originalPos, dir;
    private State currentState, previousState;
    private bool deathDialoguePlayed = false;
    private float explosionTimer = 0f;

    // Components
    private Animator anim;
    private ObjectPool_Malware objectPool;
    private MalwareManager_1 sceneManager;

    // Start is called before the first frame update
    void Start()
    {
        sceneManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<MalwareManager_1>();
        objectPool = GameObject.Find("ObjectPooling").GetComponent<ObjectPool_Malware>();
        anim = GetComponent<Animator>();
        currentState = State.IDLE;
        originalPos = transform.position;

        spywareCurrentHealth = spywareMaxHealth;
        sceneManager.UIManager.SetSpywareBossHealth(spywareCurrentHealth, spywareMaxHealth);

        sceneManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<MalwareManager_1>();
    }

    // Update is called once per frame
    void Update()
    {
        // Check if game started
        if (!sceneManager.gameStarted)
        {
            return;
        }

        // Simple Constraint
        if (transform.position.y >= 1.7f)
        {
            isUp = false;
        }
        else if (transform.position.y <= -1.7f)
        {
            isUp = true;
        }

        // Boss movement and state change
        StateMovement();
        StateControl();

        // Boss UI health update
        UpdateSpywareHealth();

        if (anim.GetCurrentAnimatorStateInfo(0).normalizedTime > 1 && !anim.IsInTransition(0))
        {
            PlayAnimation(currentState);
        }
    }

    // Used by malwarebullet collision
    public void TakeDamage() 
    {
        spywareCurrentHealth -= 1;
        if (!anim.GetCurrentAnimatorStateInfo(0).IsName("Spyware_Attack") || !anim.GetCurrentAnimatorStateInfo(0).IsName("Spyware_Popup"))
        {
            anim.Play("Spyware_Hurt");
        }

        sceneManager.audioManager.Play(damagedClip);
    }

    // Updates health UI every frame
    public void UpdateSpywareHealth() 
    {
        // Check if boss is already dead
        if (currentState == State.DEAD)
        {
            return;
        }

        if (spywareCurrentHealth > 0)
        {
            sceneManager.UIManager.SetSpywareBossHealth(spywareCurrentHealth, spywareMaxHealth);
        }
        else if (spywareCurrentHealth <= 0)
        {
            sceneManager.UIManager.spywareHealthSlider.gameObject.SetActive(false);
            currentState = State.DEAD;
        }
    }

    // Boss Attack
    public void ShootBullets()
    {
        dir = (sceneManager.playerController.transform.position - transform.position).normalized;

        nextFire = Time.time + fireRate;
        //Vector3 offset = new Vector3(-2, -2, 0);
        GameObject newBullet = objectPool.GetPooledObject();
        newBullet.transform.position = new Vector3(transform.position.x, transform.position.y);
        newBullet.transform.right = dir;
        newBullet.tag = "MalwareEnemyBullet";
        newBullet.GetComponent<SpriteRenderer>().sprite = bulletSprite;
        newBullet.transform.localScale = new Vector3(bulletSize, bulletSize, bulletSize);
        newBullet.transform.right = dir;
        newBullet.SetActive(true);

        sceneManager.audioManager.Play(shootClip);
    }

    // Boss Special Attack
    public void ShootMissles()
    {
        firingMissle = true;
        missleFired += 1;
        Vector3 offset = new Vector3(0, -1, 0);
        GameObject missle = Instantiate(misslePrefab, transform.position + offset, Quaternion.Euler(0, 0, 90));
        Destroy(missle, 4.0f);
        firingMissle = false;

        sceneManager.audioManager.Play(specialClip);
    }

    // Boss Popup Attack
    public void SummonPopup()
    {
        //Vector3 pos = new Vector3(0, Random.Range(0f, 3.4f) - 1.7f);
        Vector3 pos = new Vector3(transform.position.x - 1f, transform.position.y);
        GameObject shield = Instantiate(popupPrefab, pos, Quaternion.identity);
        shield.transform.localScale = new Vector3(0, 0, 0);
        LeanTween.scale(shield, new Vector3(2, 2, 2), 0.25f);
        LeanTween.moveLocal(shield, new Vector3(pos.x - 4f, pos.y + Random.Range(-3f, 3f)), 0.25f);
        sceneManager.audioManager.PlayAndGetObject(popClip);
    }

    // Boss movement
    private void StateMovement()
    {
        switch (currentState)
        {
            case State.IDLE:
                if (transform.position != originalPos)
                {
                    Vector3 dir = originalPos - transform.position;
                    transform.position += 2 * Time.deltaTime * dir;
                }
                break;
            case State.MOVE:
                if (isUp == true)
                {
                    transform.position += 8 * Time.deltaTime * Vector3.up;
                }
                else if (isUp == false)
                {
                    transform.position -= 8 * Time.deltaTime * Vector3.up;
                }
                break;
            case State.ATTACK:
                if (isUp == true)
                {
                    transform.position += 2 * Time.deltaTime * Vector3.up;
                }
                else if (isUp == false)
                {
                    transform.position -= 2 * Time.deltaTime * Vector3.up;
                }

                if (Time.time > nextFire) // Constantly Shoot
                {
                    ShootBullets();
                }
                break;
            case State.SP_ATTACK:
                break;
        }
    }

    // Control the boss state changes
    private void StateControl()
    {
        if (timer <= 0f)
        {
            // Set current state to previous state
            if (currentState != State.IDLE)
            {
                previousState = currentState;
                //Debug.Log("Current State: " + currentState);
            }

            switch (currentState)
            {
                // If idle change state to random state
                // Random state again if current random generated state is same as previous one
                case State.IDLE:
                    int randAnim = Random.Range(2, 6);
                    if ((int)previousState != randAnim)
                    {
                        currentState = (State)randAnim;

                        PlayAnimation(currentState);
                    }
                    break;
                case State.MOVE:
                    currentState = State.IDLE;
                    PlayAnimation(State.IDLE);
                    break;
                case State.ATTACK:
                    currentState = State.IDLE;
                    PlayAnimation(State.IDLE);
                    break;
                case State.SP_ATTACK:
                    if (missleFired <= 2 && firingMissle == false)
                    {
                        PlayAnimation(State.SP_ATTACK);
                    }
                    else if (missleFired >= 2 && anim.GetCurrentAnimatorStateInfo(0).normalizedTime > 1)
                    {
                        currentState = State.IDLE;
                        PlayAnimation(State.IDLE);
                        missleFired = 0;
                    }
                    break;
                case State.POPUP_ATTACK:
                    currentState = State.IDLE;
                    PlayAnimation(State.IDLE);
                    break;
            }

            // Set custom timer when current state
            if (currentState == State.IDLE)
            {
                timer = 2f;
            }
            else if (currentState == State.POPUP_ATTACK)
            {
                timer = 0.4f;
            }
            else if (currentState != State.SP_ATTACK)
            {
                float ranTime = Random.Range(3f, 5f);
                timer = ranTime;
            }
        }
        else if (currentState == State.DEAD)
        {
            // When the boss has died
            sceneManager.dialogueManager2.gameObject.SetActive(true);

            if (!sceneManager.isWin)
            {
                // Explosions
                explosionTimer += Time.deltaTime;
                if (explosionTimer >= timeBetweenExplosions)
                {
                    Vector3 offset = new Vector3(Random.Range(-0.25f, 0.25f), Random.Range(-0.5f, 0.5f));

                    GameObject particle = Instantiate(explosion, gameObject.transform);
                    particle.transform.localPosition = offset;
                    Destroy(particle, 1f);

                    explosionTimer = 0f;

                    sceneManager.audioManager.Play(deathClip);
                }

                // Move boss to center
                if (transform.position != originalPos)
                {
                    Vector3 dir = originalPos - transform.position;
                    transform.position += 2 * Time.deltaTime * dir;
                }
            }

            if (deathDialoguePlayed && !sceneManager.dialogueManager2.isActive && !sceneManager.isWin)
            {
                StartCoroutine(sceneManager.UIManager.FadeIn());
                StartCoroutine(SetWin());
                return;
            }
            else if (!sceneManager.dialogueManager2.isActive && sceneManager.dialogueManager2.isReady)
            {
                sceneManager.endDialoguePlaying = true;
                sceneManager.dialogueManager2.StartDialogue();
                deathDialoguePlayed = true;
            }
        }
        else
        {
            timer -= Time.deltaTime;
        }
    }

    // Set win conditions
    private IEnumerator SetWin()
    {
        yield return new WaitForSeconds(1f);

        sceneManager.SetWin();
    }

    // Change boss animation state
    private void PlayAnimation(State state)
    {
        string animName = string.Empty;
        switch (state)
        {
            case State.IDLE:
                animName = "Spyware_Idle";
                break;
            case State.MOVE:
                animName = "Spyware_Idle";
                break;
            case State.ATTACK:
                animName = "Spyware_Idle";
                break;
            case State.SP_ATTACK:
                animName = "Spyware_Attack";
                break;
            case State.POPUP_ATTACK:
                animName = "Spyware_Popup";
                break;
            case State.DEAD:
                animName = "Spyware_Hurt";
                break;
        }
        anim.Play(animName);
    }
}
