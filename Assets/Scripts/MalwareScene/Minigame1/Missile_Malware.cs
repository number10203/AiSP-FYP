using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Missile_Malware : MonoBehaviour
{
    [Header("Attributes")]
    [SerializeField] private float speed = 5f;
    [SerializeField] private float rotateSpeed = 200f;
    [SerializeField] private int hp = 3;

    [Header("Explosion")]
    [SerializeField] private GameObject explosionPrefab;
    [SerializeField] private AudioClip explosionSFX;

    [SerializeField] private GameObject hitEffect;

    // Components
    private Rigidbody2D rb2d;
    private MalwareManager_1 sceneManager;

    // Start is called before the first frame update
    void Start()
    {
        rb2d = GetComponent<Rigidbody2D>();
        sceneManager = GameObject.FindGameObjectWithTag("GameController").GetComponent<MalwareManager_1>();
    }

    // Fixed physics movement
    private void FixedUpdate()
    {
        Vector2 dir = ((Vector2)sceneManager.playerController.gameObject.transform.position - rb2d.position).normalized;

        float rotateAmt = Vector3.Cross(dir, transform.up).z;

        rb2d.angularVelocity = -rotateAmt * rotateSpeed;

        rb2d.velocity = transform.up * speed;
    }


    // Check collsiion if playing or bullet to enable damaging
    private void OnTriggerEnter2D(Collider2D other)
    {
        if (other.CompareTag("Player"))
        {
            sceneManager.playerController.TakeDamage();
            GameObject particle = Instantiate(hitEffect, transform.position, Quaternion.identity);
            Destroy(particle, 0.5f);
            Destroy(gameObject);
        }
        else if (other.CompareTag("MalwarePlayerBullet"))
        {
            --hp;
            other.gameObject.SetActive(false);
            StartCoroutine(FlashRed());
            if (hp <= 0)
            {
                Destroy(gameObject);
                GameObject explosion = Instantiate(explosionPrefab, transform.position, Quaternion.identity);
                Destroy(explosion, 0.5f);

                sceneManager.audioManager.Play(explosionSFX);
            }
        }
    }

    // IEnumerator used when hit by bullet
    private IEnumerator FlashRed()
    {
        GetComponent<SpriteRenderer>().color = Color.red;

        yield return new WaitForSeconds(0.2f);

        GetComponent<SpriteRenderer>().color = Color.white;
    }
}
