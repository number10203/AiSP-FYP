using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OptionSpawn_Malware : MonoBehaviour
{
    public GameObject folderPrefab;
    public Transform folderParent;

    [HideInInspector] public int virusCount;

    private MalwareManager_2 manager;

    [Header("Constraints")]
    [SerializeField] private float xMin;
    [SerializeField] private float xMax;
    [SerializeField] private float yMin;
    [SerializeField] private float yMax;

    private List<GameObject> folders = new List<GameObject>();

    // Start is called before the first frame update
    void Start()
    {
        manager = GameObject.Find("CurrentSceneManager").GetComponent<MalwareManager_2>();
        if (manager.qnNumber <= 2)
        {
            Spawn();
        }
    }

    void Update()
    {
        // Constraint the object
        FolderConstraint();
    }

    // Spawn folders accordingly to the question number (How many times the player has answered/dropped the folder)
    public void Spawn()
    {
        switch (manager.qnNumber)
        {
            case 0:
                // Spawning folders
                for (int i = 0; i < 3; ++i)
                {
                    Vector3 pos = new Vector3((i - 1) * 5, 0);
                    folders.Add(Instantiate(folderPrefab, pos, Quaternion.identity, folderParent));
                }
                // Random virus
                folders[Random.Range(0, 3)].GetComponent<Trojan_Malware>().SetToVirus();
                break;
            case 1:
                // Spawning folders
                for (int i = 0; i < 3; ++i)
                {
                    for (int j = 0; j < 3; j += 2)
                    {
                        Vector3 pos = new Vector3((i - 1) * 5, (j - 1) * 1f);
                        folders.Add(Instantiate(folderPrefab, pos, Quaternion.identity, folderParent));
                    }
                }
                // Random virus
                folders[Random.Range(0, 6)].GetComponent<Trojan_Malware>().SetToVirus();
                break;
            case 2:
                // Spawning folders
                for (int i = 0; i < 3; ++i)
                {
                    for (int j = 0; j < 3; ++j)
                    {
                        Vector3 pos = new Vector3((i - 1) * 5, (j - 1) * 2f);
                        folders.Add(Instantiate(folderPrefab, pos, Quaternion.identity, folderParent));
                    }
                }
                // Random virus
                folders[Random.Range(0, 9)].GetComponent<Trojan_Malware>().SetToVirus();
                break;
        }
    }

    private void FolderConstraint()
    {
        if (transform.position.y > yMax)
        {
            transform.position = new Vector3(transform.position.x, yMax);
        }
        else if (transform.position.y < yMin)
        {
            transform.position = new Vector3(transform.position.x, yMin);
        }

        if (transform.position.x > xMax)
        {
            transform.position = new Vector3(xMax, transform.position.y);
        }
        else if (transform.position.x < xMin)
        {
            transform.position = new Vector3(xMin, transform.position.y);
        }
    }

    // Clear all folders
    public void Clear()
    {
        foreach (GameObject go in folders)
        {
            Destroy(go);
        }

        folders.Clear();
    }

    // Set random colour
    private Color32 GetRandomColour32()
    {
        //using Color32
        return new Color32(
          (byte)UnityEngine.Random.Range(0, 255), //Red
          (byte)UnityEngine.Random.Range(0, 255), //Green
          (byte)UnityEngine.Random.Range(0, 255), //Blue
          255 //Alpha (transparency)
        );
    }
}
